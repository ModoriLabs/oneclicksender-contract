{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/interfaces/ICostPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\ninterface ICostPolicy {\n    function calculateCost(\n        address sender,\n        uint256 userCount,\n        uint256 totalAmount,\n        uint256 typeId\n    )\n        external\n        view\n        returns (uint256 cost);\n}\n"
    },
    "src/interfaces/ICostPolicyV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\ninterface ICostPolicyV2 {\n    function calculateCost(\n        address token,\n        address sender,\n        uint256 userCount,\n        uint256 totalAmount,\n        uint256 typeId\n    )\n        external\n        view\n        returns (uint256 cost);\n}\n"
    },
    "src/WhitelistCostPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport { ICostPolicyV2 } from \"./interfaces/ICostPolicyV2.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Ownable2Step } from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {ICostPolicy} from \"./interfaces/ICostPolicy.sol\";\n\ncontract WhitelistCostPolicy is ICostPolicyV2, Ownable2Step {\n    uint256 public oneTimeFee;\n    uint256 public perUserFee;\n    uint256 public maxFreeUserCount;\n    mapping (address => bool) public whitelist;\n\n    event OneTimeFeeUpdated(uint256 _oneTimeFee);\n    event PerUserFeeUpdated(uint256 _perUserFee);\n    event MaxFreeUserCountUpdated(uint256 _maxFreeUserCount);\n    event WhitelistUpdated(address user, bool status);\n\n    constructor(\n        address initialOwner,\n        uint256 _oneTimeFee,\n        uint256 _perUserFee,\n        uint256 _minUserCount\n    ) Ownable(initialOwner) {\n        oneTimeFee = _oneTimeFee;\n        perUserFee = _perUserFee;\n        maxFreeUserCount = _minUserCount;\n    }\n\n    /// @param token token to send. Use address(0) for ETH\n    function calculateCost(\n        address token,\n        address sender,\n        uint256 userCount,\n        uint256 totalAmount,\n        uint256 typeId\n    )\n        external\n        view\n        returns (uint256 cost)\n    {\n        if (userCount <= maxFreeUserCount) {\n            return 0;\n        }\n\n        if (whitelist[sender]) {\n            return 0;\n        }\n\n        if (typeId == 0) {\n            cost = oneTimeFee;\n        } else if (typeId == 1) {\n            cost = perUserFee * userCount;\n        } else {\n            revert(\"Invalid typeId\");\n        }\n    }\n\n    function setOneTimeFee(uint256 _oneTimeFee) external onlyOwner {\n        oneTimeFee = _oneTimeFee;\n        emit OneTimeFeeUpdated(_oneTimeFee);\n    }\n\n    function setPerUserFee(uint256 _perUserFee) external onlyOwner {\n        perUserFee = _perUserFee;\n        emit PerUserFeeUpdated(_perUserFee);\n    }\n\n    function setMaxFreeUserCount(uint256 _maxFreeUserCount) external onlyOwner {\n        maxFreeUserCount = _maxFreeUserCount;\n        emit MaxFreeUserCountUpdated(_maxFreeUserCount);\n    }\n\n    function addWhitelist(address user) external onlyOwner {\n        whitelist[user] = true;\n        emit WhitelistUpdated(user, true);\n    }\n\n    function removeWhitelist(address user) external onlyOwner {\n        whitelist[user] = false;\n        emit WhitelistUpdated(user, false);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}