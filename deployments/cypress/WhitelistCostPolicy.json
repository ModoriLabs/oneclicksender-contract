{
  "address": "0xD70b9239a89e6D56ea6661627cb710B98FF100DA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oneTimeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perUserFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUserCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxFreeUserCount",
          "type": "uint256"
        }
      ],
      "name": "MaxFreeUserCountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oneTimeFee",
          "type": "uint256"
        }
      ],
      "name": "OneTimeFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_perUserFee",
          "type": "uint256"
        }
      ],
      "name": "PerUserFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "userCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        }
      ],
      "name": "calculateCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFreeUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneTimeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perUserFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFreeUserCount",
          "type": "uint256"
        }
      ],
      "name": "setMaxFreeUserCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oneTimeFee",
          "type": "uint256"
        }
      ],
      "name": "setOneTimeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_perUserFee",
          "type": "uint256"
        }
      ],
      "name": "setPerUserFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd038169844fe1defb9562ff6da3d2ad4d486c5bbd37bf541657f1ad6c231fd8a",
  "receipt": {
    "to": null,
    "from": "0xCf638706ce117C3DBcAd607a133449551965F162",
    "contractAddress": "0xD70b9239a89e6D56ea6661627cb710B98FF100DA",
    "transactionIndex": 12,
    "gasUsed": "829728",
    "logsBloom": "0x
    "blockHash": "0xd51ac03774144c7d4e03edca865b5cace6d48195e4d28d5ac5c2e1ded89338ba",
    "transactionHash": "0xd038169844fe1defb9562ff6da3d2ad4d486c5bbd37bf541657f1ad6c231fd8a",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 146512472,
        "transactionHash": "0xd038169844fe1defb9562ff6da3d2ad4d486c5bbd37bf541657f1ad6c231fd8a",
        "address": "0xD70b9239a89e6D56ea6661627cb710B98FF100DA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf638706ce117c3dbcad607a133449551965f162"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0xd51ac03774144c7d4e03edca865b5cace6d48195e4d28d5ac5c2e1ded89338ba"
      }
    ],
    "blockNumber": 146512472,
    "cumulativeGasUsed": "8160461",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf638706ce117C3DBcAd607a133449551965F162",
    "120000000000000000000",
    "120000000000000000000",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "536814b58ef1d77e09df27f59f833606",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oneTimeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perUserFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUserCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxFreeUserCount\",\"type\":\"uint256\"}],\"name\":\"MaxFreeUserCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oneTimeFee\",\"type\":\"uint256\"}],\"name\":\"OneTimeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perUserFee\",\"type\":\"uint256\"}],\"name\":\"PerUserFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"calculateCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFreeUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTimeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFreeUserCount\",\"type\":\"uint256\"}],\"name\":\"setMaxFreeUserCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oneTimeFee\",\"type\":\"uint256\"}],\"name\":\"setOneTimeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perUserFee\",\"type\":\"uint256\"}],\"name\":\"setPerUserFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WhitelistCostPolicy.sol\":\"WhitelistCostPolicy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"src/WhitelistCostPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { ICostPolicy } from \\\"./interfaces/ICostPolicy.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\ncontract WhitelistCostPolicy is ICostPolicy, Ownable2Step {\\n    uint256 public oneTimeFee;\\n    uint256 public perUserFee;\\n    uint256 public maxFreeUserCount;\\n    mapping (address => bool) public whitelist;\\n\\n    event OneTimeFeeUpdated(uint256 _oneTimeFee);\\n    event PerUserFeeUpdated(uint256 _perUserFee);\\n    event MaxFreeUserCountUpdated(uint256 _maxFreeUserCount);\\n    event WhitelistUpdated(address user, bool status);\\n\\n    constructor(\\n        address initialOwner,\\n        uint256 _oneTimeFee,\\n        uint256 _perUserFee,\\n        uint256 _minUserCount\\n    ) Ownable(initialOwner) {\\n        oneTimeFee = _oneTimeFee;\\n        perUserFee = _perUserFee;\\n        maxFreeUserCount = _minUserCount;\\n    }\\n\\n    function calculateCost(\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost)\\n    {\\n        if (userCount <= maxFreeUserCount) {\\n            return 0;\\n        }\\n\\n        if (whitelist[sender]) {\\n            return 0;\\n        }\\n\\n        if (typeId == 0) {\\n            cost = oneTimeFee;\\n        } else if (typeId == 1) {\\n            cost = perUserFee * userCount;\\n        } else {\\n            revert(\\\"Invalid typeId\\\");\\n        }\\n    }\\n\\n    function setOneTimeFee(uint256 _oneTimeFee) external onlyOwner {\\n        oneTimeFee = _oneTimeFee;\\n        emit OneTimeFeeUpdated(_oneTimeFee);\\n    }\\n\\n    function setPerUserFee(uint256 _perUserFee) external onlyOwner {\\n        perUserFee = _perUserFee;\\n        emit PerUserFeeUpdated(_perUserFee);\\n    }\\n\\n    function setMaxFreeUserCount(uint256 _maxFreeUserCount) external onlyOwner {\\n        maxFreeUserCount = _maxFreeUserCount;\\n        emit MaxFreeUserCountUpdated(_maxFreeUserCount);\\n    }\\n\\n    function addWhitelist(address user) external onlyOwner {\\n        whitelist[user] = true;\\n        emit WhitelistUpdated(user, true);\\n    }\\n\\n    function removeWhitelist(address user) external onlyOwner {\\n        whitelist[user] = false;\\n        emit WhitelistUpdated(user, false);\\n    }\\n}\\n\",\"keccak256\":\"0x36ddbc8783a8dd4fdd242025c96639bcb33b1c8fb10fda9f6cf6fcaf3460548e\",\"license\":\"MIT\"},\"src/interfaces/ICostPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ICostPolicy {\\n    function calculateCost(\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0x8fcfa9d2b02d860593b3bd75ae216d14038f07a9d9ad04e839e49a2f486ffed5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161099138038061099183398101604081905261002f916100e6565b836001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007a565b5060029290925560035560045550610131565b600180546001600160a01b031916905561009381610096565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100fc57600080fd5b84516001600160a01b038116811461011357600080fd5b60208601516040870151606090970151919890975090945092505050565b610851806101406000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b80638da5cb5b1461016a5780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063715018a6116100d3578063715018a614610132578063748ddfc01461013c57806378c8cda71461014f57806379ba50971461016257600080fd5b80631c3004f9146100fa5780635288d945146101165780636702106a14610129575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b610103610124366004610763565b61024f565b61010360045481565b61013a610335565b005b61013a61014a36600461079c565b610349565b61013a61015d3660046107b5565b61038d565b61013a610417565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101cc6101b73660046107b5565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b61013a6101ea36600461079c565b61048e565b61013a6101fd36600461079c565b6104cb565b60015473ffffffffffffffffffffffffffffffffffffffff16610184565b61013a61022e3660046107b5565b610508565b61013a6102413660046107b5565b6105b8565b61010360025481565b600060045484116102625750600061032d565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156102985750600061032d565b816000036102a9575060025461032d565b816001036102c657836003546102bf91906107d7565b905061032d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642074797065496400000000000000000000000000000000000060448201526064015b60405180910390fd5b949350505050565b61033d610646565b6103476000610699565b565b610351610646565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b610395610646565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d9101610382565b600154339073ffffffffffffffffffffffffffffffffffffffff168114610482576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610324565b61048b81610699565b50565b610496610646565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b690602001610382565b6104d3610646565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f90602001610382565b610510610646565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057360005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c0610646565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d9101610382565b60005473ffffffffffffffffffffffffffffffffffffffff163314610347576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610324565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561048b816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461075e57600080fd5b919050565b6000806000806080858703121561077957600080fd5b6107828561073a565b966020860135965060408601359560600135945092505050565b6000602082840312156107ae57600080fd5b5035919050565b6000602082840312156107c757600080fd5b6107d08261073a565b9392505050565b8082028115828204841417610815577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212204dac1cb54e663f0218247f9c1fe849c8f89d4837fadd8befec9cb31d5fd590fe64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b80638da5cb5b1461016a5780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063715018a6116100d3578063715018a614610132578063748ddfc01461013c57806378c8cda71461014f57806379ba50971461016257600080fd5b80631c3004f9146100fa5780635288d945146101165780636702106a14610129575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b610103610124366004610763565b61024f565b61010360045481565b61013a610335565b005b61013a61014a36600461079c565b610349565b61013a61015d3660046107b5565b61038d565b61013a610417565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101cc6101b73660046107b5565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b61013a6101ea36600461079c565b61048e565b61013a6101fd36600461079c565b6104cb565b60015473ffffffffffffffffffffffffffffffffffffffff16610184565b61013a61022e3660046107b5565b610508565b61013a6102413660046107b5565b6105b8565b61010360025481565b600060045484116102625750600061032d565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156102985750600061032d565b816000036102a9575060025461032d565b816001036102c657836003546102bf91906107d7565b905061032d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642074797065496400000000000000000000000000000000000060448201526064015b60405180910390fd5b949350505050565b61033d610646565b6103476000610699565b565b610351610646565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b610395610646565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d9101610382565b600154339073ffffffffffffffffffffffffffffffffffffffff168114610482576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610324565b61048b81610699565b50565b610496610646565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b690602001610382565b6104d3610646565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f90602001610382565b610510610646565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057360005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c0610646565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d9101610382565b60005473ffffffffffffffffffffffffffffffffffffffff163314610347576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610324565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561048b816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461075e57600080fd5b919050565b6000806000806080858703121561077957600080fd5b6107828561073a565b966020860135965060408601359560600135945092505050565b6000602082840312156107ae57600080fd5b5035919050565b6000602082840312156107c757600080fd5b6107d08261073a565b9392505050565b8082028115828204841417610815577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212204dac1cb54e663f0218247f9c1fe849c8f89d4837fadd8befec9cb31d5fd590fe64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1025,
        "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
        "label": "oneTimeFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1027,
        "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
        "label": "perUserFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1029,
        "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
        "label": "maxFreeUserCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1033,
        "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
        "label": "whitelist",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}