{
  "0x5d0987fa267804b481094f354cd4bb7717a8f05d061d733ff5299e7e8e018296": {
    "name": "WhitelistCostPolicy",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "WhitelistCostPolicy",
      "sourceName": "src/WhitelistCostPolicy.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initialOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_oneTimeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_perUserFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minUserCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_maxFreeUserCount",
              "type": "uint256"
            }
          ],
          "name": "MaxFreeUserCountUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_oneTimeFee",
              "type": "uint256"
            }
          ],
          "name": "OneTimeFeeUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferStarted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_perUserFee",
              "type": "uint256"
            }
          ],
          "name": "PerUserFeeUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "status",
              "type": "bool"
            }
          ],
          "name": "WhitelistUpdated",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "acceptOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "addWhitelist",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "userCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "typeId",
              "type": "uint256"
            }
          ],
          "name": "calculateCost",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "cost",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxFreeUserCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "oneTimeFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "perUserFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "removeWhitelist",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxFreeUserCount",
              "type": "uint256"
            }
          ],
          "name": "setMaxFreeUserCount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_oneTimeFee",
              "type": "uint256"
            }
          ],
          "name": "setOneTimeFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_perUserFee",
              "type": "uint256"
            }
          ],
          "name": "setPerUserFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "whitelist",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b506040516109a63803806109a683398101604081905261002f916100e6565b836001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007a565b5060029290925560035560045550610131565b600180546001600160a01b031916905561009381610096565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100fc57600080fd5b84516001600160a01b038116811461011357600080fd5b60208601516040870151606090970151919890975090945092505050565b610866806101406000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063937b1e1a11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b8063937b1e1a146101965780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063748ddfc0116100d3578063748ddfc01461012957806378c8cda71461013c57806379ba50971461014f5780638da5cb5b1461015757600080fd5b80631c3004f9146100fa5780636702106a14610116578063715018a61461011f575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b61010360045481565b61012761024f565b005b61012761013736600461073b565b610263565b61012761014a36600461077d565b6102a7565b610127610331565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101036101a436600461079f565b6103ad565b6101cc6101b736600461077d565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b6101276101ea36600461073b565b61048f565b6101276101fd36600461073b565b6104cc565b60015473ffffffffffffffffffffffffffffffffffffffff16610171565b61012761022e36600461077d565b610509565b61012761024136600461077d565b6105b9565b61010360025481565b610257610647565b610261600061069a565b565b61026b610647565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b6102af610647565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103a1576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b6103aa8161069a565b50565b600060045484116103c057506000610486565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156103f657506000610486565b816000036104075750600254610486565b81600103610424578360035461041d91906107ec565b9050610486565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207479706549640000000000000000000000000000000000006044820152606401610398565b95945050505050565b610497610647565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b69060200161029c565b6104d4610647565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f9060200161029c565b610511610647565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c1610647565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610261576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610398565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103aa816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561074d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b919050565b60006020828403121561078f57600080fd5b61079882610754565b9392505050565b600080600080600060a086880312156107b757600080fd5b6107c086610754565b94506107ce60208701610754565b94979496505050506040830135926060810135926080909101359150565b808202811582820484141761082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212207c7f6a76bc86e756ddd648a3807f189f0cd8f16fe541f32a35126d01f1c11e1264736f6c63430008170033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063937b1e1a11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b8063937b1e1a146101965780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063748ddfc0116100d3578063748ddfc01461012957806378c8cda71461013c57806379ba50971461014f5780638da5cb5b1461015757600080fd5b80631c3004f9146100fa5780636702106a14610116578063715018a61461011f575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b61010360045481565b61012761024f565b005b61012761013736600461073b565b610263565b61012761014a36600461077d565b6102a7565b610127610331565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101036101a436600461079f565b6103ad565b6101cc6101b736600461077d565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b6101276101ea36600461073b565b61048f565b6101276101fd36600461073b565b6104cc565b60015473ffffffffffffffffffffffffffffffffffffffff16610171565b61012761022e36600461077d565b610509565b61012761024136600461077d565b6105b9565b61010360025481565b610257610647565b610261600061069a565b565b61026b610647565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b6102af610647565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103a1576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b6103aa8161069a565b50565b600060045484116103c057506000610486565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156103f657506000610486565b816000036104075750600254610486565b81600103610424578360035461041d91906107ec565b9050610486565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207479706549640000000000000000000000000000000000006044820152606401610398565b95945050505050565b610497610647565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b69060200161029c565b6104d4610647565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f9060200161029c565b610511610647565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c1610647565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610261576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610398565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103aa816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561074d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b919050565b60006020828403121561078f57600080fd5b61079882610754565b9392505050565b600080600080600060a086880312156107b757600080fd5b6107c086610754565b94506107ce60208701610754565b94979496505050506040830135926060810135926080909101359150565b808202811582820484141761082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212207c7f6a76bc86e756ddd648a3807f189f0cd8f16fe541f32a35126d01f1c11e1264736f6c63430008170033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "OwnableInvalidOwner(address)": [
            {
              "details": "The owner is not a valid owner account. (eg. `address(0)`)"
            }
          ],
          "OwnableUnauthorizedAccount(address)": [
            {
              "details": "The caller account is not authorized to perform an operation."
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "acceptOwnership()": {
            "details": "The new owner accepts the ownership transfer."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pendingOwner()": {
            "details": "Returns the address of the pending owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1010": {
              "entryPoint": null,
              "id": 1010,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_2946": {
              "entryPoint": null,
              "id": 2946,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_transferOwnership_1106": {
              "entryPoint": 150,
              "id": 1106,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_1168": {
              "entryPoint": 122,
              "id": 1168,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256_fromMemory": {
              "entryPoint": 230,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:698:23",
                "nodeType": "YulBlock",
                "src": "0:698:23",
                "statements": [
                  {
                    "nativeSrc": "6:3:23",
                    "nodeType": "YulBlock",
                    "src": "6:3:23",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "146:342:23",
                      "nodeType": "YulBlock",
                      "src": "146:342:23",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "193:16:23",
                            "nodeType": "YulBlock",
                            "src": "193:16:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "202:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "202:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "205:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "205:1:23",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "195:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "195:6:23"
                                  },
                                  "nativeSrc": "195:12:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "195:12:23"
                                },
                                "nativeSrc": "195:12:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "195:12:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "167:7:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "167:7:23"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "176:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "176:9:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "163:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "163:3:23"
                                },
                                "nativeSrc": "163:23:23",
                                "nodeType": "YulFunctionCall",
                                "src": "163:23:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "188:3:23",
                                "nodeType": "YulLiteral",
                                "src": "188:3:23",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "159:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "159:3:23"
                            },
                            "nativeSrc": "159:33:23",
                            "nodeType": "YulFunctionCall",
                            "src": "159:33:23"
                          },
                          "nativeSrc": "156:53:23",
                          "nodeType": "YulIf",
                          "src": "156:53:23"
                        },
                        {
                          "nativeSrc": "218:29:23",
                          "nodeType": "YulVariableDeclaration",
                          "src": "218:29:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "237:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "237:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "231:5:23",
                              "nodeType": "YulIdentifier",
                              "src": "231:5:23"
                            },
                            "nativeSrc": "231:16:23",
                            "nodeType": "YulFunctionCall",
                            "src": "231:16:23"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "222:5:23",
                              "nodeType": "YulTypedName",
                              "src": "222:5:23",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "310:16:23",
                            "nodeType": "YulBlock",
                            "src": "310:16:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "319:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "319:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "322:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "322:1:23",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "312:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "312:6:23"
                                  },
                                  "nativeSrc": "312:12:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "312:12:23"
                                },
                                "nativeSrc": "312:12:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "312:12:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "269:5:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "269:5:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "280:5:23",
                                        "nodeType": "YulIdentifier",
                                        "src": "280:5:23"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "295:3:23",
                                                "nodeType": "YulLiteral",
                                                "src": "295:3:23",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "300:1:23",
                                                "nodeType": "YulLiteral",
                                                "src": "300:1:23",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "291:3:23",
                                              "nodeType": "YulIdentifier",
                                              "src": "291:3:23"
                                            },
                                            "nativeSrc": "291:11:23",
                                            "nodeType": "YulFunctionCall",
                                            "src": "291:11:23"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "304:1:23",
                                            "nodeType": "YulLiteral",
                                            "src": "304:1:23",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "287:3:23",
                                          "nodeType": "YulIdentifier",
                                          "src": "287:3:23"
                                        },
                                        "nativeSrc": "287:19:23",
                                        "nodeType": "YulFunctionCall",
                                        "src": "287:19:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "276:3:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "276:3:23"
                                    },
                                    "nativeSrc": "276:31:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "276:31:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "266:2:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "266:2:23"
                                },
                                "nativeSrc": "266:42:23",
                                "nodeType": "YulFunctionCall",
                                "src": "266:42:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "259:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "259:6:23"
                            },
                            "nativeSrc": "259:50:23",
                            "nodeType": "YulFunctionCall",
                            "src": "259:50:23"
                          },
                          "nativeSrc": "256:70:23",
                          "nodeType": "YulIf",
                          "src": "256:70:23"
                        },
                        {
                          "nativeSrc": "335:15:23",
                          "nodeType": "YulAssignment",
                          "src": "335:15:23",
                          "value": {
                            "name": "value",
                            "nativeSrc": "345:5:23",
                            "nodeType": "YulIdentifier",
                            "src": "345:5:23"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "335:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "335:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "359:35:23",
                          "nodeType": "YulAssignment",
                          "src": "359:35:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "379:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "379:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "390:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "390:2:23",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "375:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "375:3:23"
                                },
                                "nativeSrc": "375:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "375:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "369:5:23",
                              "nodeType": "YulIdentifier",
                              "src": "369:5:23"
                            },
                            "nativeSrc": "369:25:23",
                            "nodeType": "YulFunctionCall",
                            "src": "369:25:23"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "359:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "359:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "403:35:23",
                          "nodeType": "YulAssignment",
                          "src": "403:35:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "423:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "423:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "434:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "434:2:23",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "419:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "419:3:23"
                                },
                                "nativeSrc": "419:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "419:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "413:5:23",
                              "nodeType": "YulIdentifier",
                              "src": "413:5:23"
                            },
                            "nativeSrc": "413:25:23",
                            "nodeType": "YulFunctionCall",
                            "src": "413:25:23"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nativeSrc": "403:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "403:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "447:35:23",
                          "nodeType": "YulAssignment",
                          "src": "447:35:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "467:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "467:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "478:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "478:2:23",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "463:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "463:3:23"
                                },
                                "nativeSrc": "463:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "463:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "457:5:23",
                              "nodeType": "YulIdentifier",
                              "src": "457:5:23"
                            },
                            "nativeSrc": "457:25:23",
                            "nodeType": "YulFunctionCall",
                            "src": "457:25:23"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nativeSrc": "447:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "447:6:23"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256_fromMemory",
                    "nativeSrc": "14:474:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "88:9:23",
                        "nodeType": "YulTypedName",
                        "src": "88:9:23",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "99:7:23",
                        "nodeType": "YulTypedName",
                        "src": "99:7:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "111:6:23",
                        "nodeType": "YulTypedName",
                        "src": "111:6:23",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "119:6:23",
                        "nodeType": "YulTypedName",
                        "src": "119:6:23",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "127:6:23",
                        "nodeType": "YulTypedName",
                        "src": "127:6:23",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "135:6:23",
                        "nodeType": "YulTypedName",
                        "src": "135:6:23",
                        "type": ""
                      }
                    ],
                    "src": "14:474:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "594:102:23",
                      "nodeType": "YulBlock",
                      "src": "594:102:23",
                      "statements": [
                        {
                          "nativeSrc": "604:26:23",
                          "nodeType": "YulAssignment",
                          "src": "604:26:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "616:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "616:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "627:2:23",
                                "nodeType": "YulLiteral",
                                "src": "627:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "612:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "612:3:23"
                            },
                            "nativeSrc": "612:18:23",
                            "nodeType": "YulFunctionCall",
                            "src": "612:18:23"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "604:4:23",
                              "nodeType": "YulIdentifier",
                              "src": "604:4:23"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "646:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "646:9:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "661:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "661:6:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "677:3:23",
                                            "nodeType": "YulLiteral",
                                            "src": "677:3:23",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "682:1:23",
                                            "nodeType": "YulLiteral",
                                            "src": "682:1:23",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "673:3:23",
                                          "nodeType": "YulIdentifier",
                                          "src": "673:3:23"
                                        },
                                        "nativeSrc": "673:11:23",
                                        "nodeType": "YulFunctionCall",
                                        "src": "673:11:23"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "686:1:23",
                                        "nodeType": "YulLiteral",
                                        "src": "686:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "669:3:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "669:3:23"
                                    },
                                    "nativeSrc": "669:19:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "669:19:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "657:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "657:3:23"
                                },
                                "nativeSrc": "657:32:23",
                                "nodeType": "YulFunctionCall",
                                "src": "657:32:23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "639:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "639:6:23"
                            },
                            "nativeSrc": "639:51:23",
                            "nodeType": "YulFunctionCall",
                            "src": "639:51:23"
                          },
                          "nativeSrc": "639:51:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "639:51:23"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "493:203:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "563:9:23",
                        "nodeType": "YulTypedName",
                        "src": "563:9:23",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "574:6:23",
                        "nodeType": "YulTypedName",
                        "src": "574:6:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "585:4:23",
                        "nodeType": "YulTypedName",
                        "src": "585:4:23",
                        "type": ""
                      }
                    ],
                    "src": "493:203:23"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
              "id": 23,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506040516109a63803806109a683398101604081905261002f916100e6565b836001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007a565b5060029290925560035560045550610131565b600180546001600160a01b031916905561009381610096565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100fc57600080fd5b84516001600160a01b038116811461011357600080fd5b60208601516040870151606090970151919890975090945092505050565b610866806101406000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063937b1e1a11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b8063937b1e1a146101965780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063748ddfc0116100d3578063748ddfc01461012957806378c8cda71461013c57806379ba50971461014f5780638da5cb5b1461015757600080fd5b80631c3004f9146100fa5780636702106a14610116578063715018a61461011f575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b61010360045481565b61012761024f565b005b61012761013736600461073b565b610263565b61012761014a36600461077d565b6102a7565b610127610331565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101036101a436600461079f565b6103ad565b6101cc6101b736600461077d565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b6101276101ea36600461073b565b61048f565b6101276101fd36600461073b565b6104cc565b60015473ffffffffffffffffffffffffffffffffffffffff16610171565b61012761022e36600461077d565b610509565b61012761024136600461077d565b6105b9565b61010360025481565b610257610647565b610261600061069a565b565b61026b610647565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b6102af610647565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103a1576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b6103aa8161069a565b50565b600060045484116103c057506000610486565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156103f657506000610486565b816000036104075750600254610486565b81600103610424578360035461041d91906107ec565b9050610486565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207479706549640000000000000000000000000000000000006044820152606401610398565b95945050505050565b610497610647565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b69060200161029c565b6104d4610647565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f9060200161029c565b610511610647565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c1610647565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610261576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610398565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103aa816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561074d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b919050565b60006020828403121561078f57600080fd5b61079882610754565b9392505050565b600080600080600060a086880312156107b757600080fd5b6107c086610754565b94506107ce60208701610754565b94979496505050506040830135926060810135926080909101359150565b808202811582820484141761082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212207c7f6a76bc86e756ddd648a3807f189f0cd8f16fe541f32a35126d01f1c11e1264736f6c63430008170033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x9A6 CODESIZE SUB DUP1 PUSH2 0x9A6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xE6 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x67 DUP2 PUSH2 0x7A JUMP JUMPDEST POP PUSH1 0x2 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x3 SSTORE PUSH1 0x4 SSTORE POP PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x93 DUP2 PUSH2 0x96 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x60 SWAP1 SWAP8 ADD MLOAD SWAP2 SWAP9 SWAP1 SWAP8 POP SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x866 DUP1 PUSH2 0x140 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x937B1E1A GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE30C3978 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xF80F5DD5 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xF8245BCA EQ PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x937B1E1A EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x9B19251A EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xBE0A8433 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xE1BA2426 EQ PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x748DDFC0 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x748DDFC0 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x78C8CDA7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1C3004F9 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6702106A EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x11F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x103 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x24F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x127 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x331 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10D JUMP JUMPDEST PUSH2 0x103 PUSH2 0x1A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x79F JUMP JUMPDEST PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10D JUMP JUMPDEST PUSH2 0x127 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x48F JUMP JUMPDEST PUSH2 0x127 PUSH2 0x1FD CALLDATASIZE PUSH1 0x4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x171 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x509 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x241 CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x257 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x261 PUSH1 0x0 PUSH2 0x69A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26B PUSH2 0x647 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xE4E9D0C42D8FF6BD519BE0E8FD05D3D4748E8652FE9DE147829FCF629ECB036E SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x2AF PUSH2 0x647 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF93F9A76C1BF3444D22400A00CB9FE990E6ABE9DBB333FDA48859CFEE864543D SWAP2 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x1 SLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 EQ PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AA DUP2 PUSH2 0x69A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD DUP5 GT PUSH2 0x3C0 JUMPI POP PUSH1 0x0 PUSH2 0x486 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3F6 JUMPI POP PUSH1 0x0 PUSH2 0x486 JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x407 JUMPI POP PUSH1 0x2 SLOAD PUSH2 0x486 JUMP JUMPDEST DUP2 PUSH1 0x1 SUB PUSH2 0x424 JUMPI DUP4 PUSH1 0x3 SLOAD PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x7EC JUMP JUMPDEST SWAP1 POP PUSH2 0x486 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420747970654964000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x398 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x497 PUSH2 0x647 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x663296B7F6BFFFFD2FE8B1A20BA38B843659FACF6B429FA95B92DD589ED552B6 SWAP1 PUSH1 0x20 ADD PUSH2 0x29C JUMP JUMPDEST PUSH2 0x4D4 PUSH2 0x647 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x65E483827EE434BD81785823D46BDF2D3CE181AA289DE8108EEEEE22B207F50F SWAP1 PUSH1 0x20 ADD PUSH2 0x29C JUMP JUMPDEST PUSH2 0x511 PUSH2 0x647 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x574 PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x5C1 PUSH2 0x647 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0xF93F9A76C1BF3444D22400A00CB9FE990E6ABE9DBB333FDA48859CFEE864543D SWAP2 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x261 JUMPI PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x398 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE PUSH2 0x3AA DUP2 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x74D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP3 PUSH2 0x754 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C0 DUP7 PUSH2 0x754 JUMP JUMPDEST SWAP5 POP PUSH2 0x7CE PUSH1 0x20 DUP8 ADD PUSH2 0x754 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x82A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x7F6A76BC86E756DDD648A3807F189F0CD8F16FE541F32A35126D01F1C1 0x1E SLT PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
          "sourceMap": "330:2080:20:-:0;;;762:276;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;907:12;-1:-1:-1;;;;;1273:26:6;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:6;;1350:1;1322:31;;;639:51:23;612:18;;1322:31:6;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;931:10:20::1;:24:::0;;;;965:10:::1;:24:::0;999:16:::1;:32:::0;-1:-1:-1;330:2080:20;;1528:153:7;1617:13;1610:20;;-1:-1:-1;;;;;;1610:20:7;;;1640:34;1665:8;1640:24;:34::i;:::-;1528:153;:::o;2912:187:6:-;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:6;;;-1:-1:-1;;;;;;3020:17:6;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:474:23:-;111:6;119;127;135;188:3;176:9;167:7;163:23;159:33;156:53;;;205:1;202;195:12;156:53;231:16;;-1:-1:-1;;;;;276:31:23;;266:42;;256:70;;322:1;319;312:12;256:70;390:2;375:18;;369:25;434:2;419:18;;413:25;478:2;463:18;;;457:25;345:5;;369:25;;-1:-1:-1;457:25:23;;-1:-1:-1;14:474:23;-1:-1:-1;;;14:474:23:o;493:203::-;330:2080:20;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_checkOwner_1044": {
              "entryPoint": 1607,
              "id": 1044,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_msgSender_2185": {
              "entryPoint": null,
              "id": 2185,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_transferOwnership_1106": {
              "entryPoint": null,
              "id": 1106,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_1168": {
              "entryPoint": 1690,
              "id": 1168,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@acceptOwnership_1192": {
              "entryPoint": 817,
              "id": 1192,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addWhitelist_3068": {
              "entryPoint": 1465,
              "id": 3068,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@calculateCost_3001": {
              "entryPoint": 941,
              "id": 3001,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@maxFreeUserCount_2897": {
              "entryPoint": null,
              "id": 2897,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@oneTimeFee_2893": {
              "entryPoint": null,
              "id": 2893,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@owner_1027": {
              "entryPoint": null,
              "id": 1027,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@pendingOwner_1131": {
              "entryPoint": null,
              "id": 1131,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@perUserFee_2895": {
              "entryPoint": null,
              "id": 2895,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@removeWhitelist_3087": {
              "entryPoint": 679,
              "id": 3087,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@renounceOwnership_1058": {
              "entryPoint": 591,
              "id": 1058,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@setMaxFreeUserCount_3049": {
              "entryPoint": 1167,
              "id": 3049,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setOneTimeFee_3017": {
              "entryPoint": 1228,
              "id": 3017,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setPerUserFee_3033": {
              "entryPoint": 611,
              "id": 3033,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@transferOwnership_1151": {
              "entryPoint": 1289,
              "id": 1151,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@whitelist_2901": {
              "entryPoint": null,
              "id": 2901,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 1876,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 1917,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256": {
              "entryPoint": 1951,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 1851,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_bfdc576261a4768c0a8004a0ac0e8e3c6e8c45cab828024d35f45a8401d7e0a1__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 2028,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:2646:23",
                "nodeType": "YulBlock",
                "src": "0:2646:23",
                "statements": [
                  {
                    "nativeSrc": "6:3:23",
                    "nodeType": "YulBlock",
                    "src": "6:3:23",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "115:76:23",
                      "nodeType": "YulBlock",
                      "src": "115:76:23",
                      "statements": [
                        {
                          "nativeSrc": "125:26:23",
                          "nodeType": "YulAssignment",
                          "src": "125:26:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "137:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "137:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "148:2:23",
                                "nodeType": "YulLiteral",
                                "src": "148:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "133:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "133:3:23"
                            },
                            "nativeSrc": "133:18:23",
                            "nodeType": "YulFunctionCall",
                            "src": "133:18:23"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "125:4:23",
                              "nodeType": "YulIdentifier",
                              "src": "125:4:23"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "167:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "167:9:23"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "178:6:23",
                                "nodeType": "YulIdentifier",
                                "src": "178:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "160:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "160:6:23"
                            },
                            "nativeSrc": "160:25:23",
                            "nodeType": "YulFunctionCall",
                            "src": "160:25:23"
                          },
                          "nativeSrc": "160:25:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "160:25:23"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "14:177:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "84:9:23",
                        "nodeType": "YulTypedName",
                        "src": "84:9:23",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "95:6:23",
                        "nodeType": "YulTypedName",
                        "src": "95:6:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "106:4:23",
                        "nodeType": "YulTypedName",
                        "src": "106:4:23",
                        "type": ""
                      }
                    ],
                    "src": "14:177:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "266:110:23",
                      "nodeType": "YulBlock",
                      "src": "266:110:23",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "312:16:23",
                            "nodeType": "YulBlock",
                            "src": "312:16:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "321:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "321:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "324:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "324:1:23",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "314:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "314:6:23"
                                  },
                                  "nativeSrc": "314:12:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "314:12:23"
                                },
                                "nativeSrc": "314:12:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "314:12:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "287:7:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "287:7:23"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "296:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "296:9:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "283:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "283:3:23"
                                },
                                "nativeSrc": "283:23:23",
                                "nodeType": "YulFunctionCall",
                                "src": "283:23:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "308:2:23",
                                "nodeType": "YulLiteral",
                                "src": "308:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "279:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "279:3:23"
                            },
                            "nativeSrc": "279:32:23",
                            "nodeType": "YulFunctionCall",
                            "src": "279:32:23"
                          },
                          "nativeSrc": "276:52:23",
                          "nodeType": "YulIf",
                          "src": "276:52:23"
                        },
                        {
                          "nativeSrc": "337:33:23",
                          "nodeType": "YulAssignment",
                          "src": "337:33:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "360:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "360:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "347:12:23",
                              "nodeType": "YulIdentifier",
                              "src": "347:12:23"
                            },
                            "nativeSrc": "347:23:23",
                            "nodeType": "YulFunctionCall",
                            "src": "347:23:23"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "337:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "337:6:23"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nativeSrc": "196:180:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "232:9:23",
                        "nodeType": "YulTypedName",
                        "src": "232:9:23",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "243:7:23",
                        "nodeType": "YulTypedName",
                        "src": "243:7:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "255:6:23",
                        "nodeType": "YulTypedName",
                        "src": "255:6:23",
                        "type": ""
                      }
                    ],
                    "src": "196:180:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "430:147:23",
                      "nodeType": "YulBlock",
                      "src": "430:147:23",
                      "statements": [
                        {
                          "nativeSrc": "440:29:23",
                          "nodeType": "YulAssignment",
                          "src": "440:29:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "462:6:23",
                                "nodeType": "YulIdentifier",
                                "src": "462:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "449:12:23",
                              "nodeType": "YulIdentifier",
                              "src": "449:12:23"
                            },
                            "nativeSrc": "449:20:23",
                            "nodeType": "YulFunctionCall",
                            "src": "449:20:23"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "440:5:23",
                              "nodeType": "YulIdentifier",
                              "src": "440:5:23"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "555:16:23",
                            "nodeType": "YulBlock",
                            "src": "555:16:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "564:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "564:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "567:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "567:1:23",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "557:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "557:6:23"
                                  },
                                  "nativeSrc": "557:12:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "557:12:23"
                                },
                                "nativeSrc": "557:12:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "557:12:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "491:5:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "491:5:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "502:5:23",
                                        "nodeType": "YulIdentifier",
                                        "src": "502:5:23"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "509:42:23",
                                        "nodeType": "YulLiteral",
                                        "src": "509:42:23",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "498:3:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "498:3:23"
                                    },
                                    "nativeSrc": "498:54:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "498:54:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "488:2:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "488:2:23"
                                },
                                "nativeSrc": "488:65:23",
                                "nodeType": "YulFunctionCall",
                                "src": "488:65:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "481:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "481:6:23"
                            },
                            "nativeSrc": "481:73:23",
                            "nodeType": "YulFunctionCall",
                            "src": "481:73:23"
                          },
                          "nativeSrc": "478:93:23",
                          "nodeType": "YulIf",
                          "src": "478:93:23"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nativeSrc": "381:196:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "409:6:23",
                        "nodeType": "YulTypedName",
                        "src": "409:6:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "420:5:23",
                        "nodeType": "YulTypedName",
                        "src": "420:5:23",
                        "type": ""
                      }
                    ],
                    "src": "381:196:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "652:116:23",
                      "nodeType": "YulBlock",
                      "src": "652:116:23",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "698:16:23",
                            "nodeType": "YulBlock",
                            "src": "698:16:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "707:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "707:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "710:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "710:1:23",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "700:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "700:6:23"
                                  },
                                  "nativeSrc": "700:12:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "700:12:23"
                                },
                                "nativeSrc": "700:12:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "700:12:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "673:7:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "673:7:23"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "682:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "682:9:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "669:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "669:3:23"
                                },
                                "nativeSrc": "669:23:23",
                                "nodeType": "YulFunctionCall",
                                "src": "669:23:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "694:2:23",
                                "nodeType": "YulLiteral",
                                "src": "694:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "665:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "665:3:23"
                            },
                            "nativeSrc": "665:32:23",
                            "nodeType": "YulFunctionCall",
                            "src": "665:32:23"
                          },
                          "nativeSrc": "662:52:23",
                          "nodeType": "YulIf",
                          "src": "662:52:23"
                        },
                        {
                          "nativeSrc": "723:39:23",
                          "nodeType": "YulAssignment",
                          "src": "723:39:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "752:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "752:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "733:18:23",
                              "nodeType": "YulIdentifier",
                              "src": "733:18:23"
                            },
                            "nativeSrc": "733:29:23",
                            "nodeType": "YulFunctionCall",
                            "src": "733:29:23"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "723:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "723:6:23"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "582:186:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "618:9:23",
                        "nodeType": "YulTypedName",
                        "src": "618:9:23",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "629:7:23",
                        "nodeType": "YulTypedName",
                        "src": "629:7:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "641:6:23",
                        "nodeType": "YulTypedName",
                        "src": "641:6:23",
                        "type": ""
                      }
                    ],
                    "src": "582:186:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "874:125:23",
                      "nodeType": "YulBlock",
                      "src": "874:125:23",
                      "statements": [
                        {
                          "nativeSrc": "884:26:23",
                          "nodeType": "YulAssignment",
                          "src": "884:26:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "896:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "896:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "907:2:23",
                                "nodeType": "YulLiteral",
                                "src": "907:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "892:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "892:3:23"
                            },
                            "nativeSrc": "892:18:23",
                            "nodeType": "YulFunctionCall",
                            "src": "892:18:23"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "884:4:23",
                              "nodeType": "YulIdentifier",
                              "src": "884:4:23"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "926:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "926:9:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "941:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "941:6:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "949:42:23",
                                    "nodeType": "YulLiteral",
                                    "src": "949:42:23",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "937:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "937:3:23"
                                },
                                "nativeSrc": "937:55:23",
                                "nodeType": "YulFunctionCall",
                                "src": "937:55:23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "919:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "919:6:23"
                            },
                            "nativeSrc": "919:74:23",
                            "nodeType": "YulFunctionCall",
                            "src": "919:74:23"
                          },
                          "nativeSrc": "919:74:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "919:74:23"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "773:226:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "843:9:23",
                        "nodeType": "YulTypedName",
                        "src": "843:9:23",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "854:6:23",
                        "nodeType": "YulTypedName",
                        "src": "854:6:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "865:4:23",
                        "nodeType": "YulTypedName",
                        "src": "865:4:23",
                        "type": ""
                      }
                    ],
                    "src": "773:226:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "1142:328:23",
                      "nodeType": "YulBlock",
                      "src": "1142:328:23",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1189:16:23",
                            "nodeType": "YulBlock",
                            "src": "1189:16:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1198:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "1198:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1201:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "1201:1:23",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1191:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1191:6:23"
                                  },
                                  "nativeSrc": "1191:12:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1191:12:23"
                                },
                                "nativeSrc": "1191:12:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "1191:12:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1163:7:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1163:7:23"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1172:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1172:9:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1159:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1159:3:23"
                                },
                                "nativeSrc": "1159:23:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1159:23:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1184:3:23",
                                "nodeType": "YulLiteral",
                                "src": "1184:3:23",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1155:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "1155:3:23"
                            },
                            "nativeSrc": "1155:33:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1155:33:23"
                          },
                          "nativeSrc": "1152:53:23",
                          "nodeType": "YulIf",
                          "src": "1152:53:23"
                        },
                        {
                          "nativeSrc": "1214:39:23",
                          "nodeType": "YulAssignment",
                          "src": "1214:39:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1243:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "1243:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1224:18:23",
                              "nodeType": "YulIdentifier",
                              "src": "1224:18:23"
                            },
                            "nativeSrc": "1224:29:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1224:29:23"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "1214:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1214:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1262:48:23",
                          "nodeType": "YulAssignment",
                          "src": "1262:48:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1295:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1295:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1306:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "1306:2:23",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1291:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1291:3:23"
                                },
                                "nativeSrc": "1291:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1291:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1272:18:23",
                              "nodeType": "YulIdentifier",
                              "src": "1272:18:23"
                            },
                            "nativeSrc": "1272:38:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1272:38:23"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "1262:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1262:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1319:42:23",
                          "nodeType": "YulAssignment",
                          "src": "1319:42:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1346:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1346:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1357:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "1357:2:23",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1342:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1342:3:23"
                                },
                                "nativeSrc": "1342:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1342:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1329:12:23",
                              "nodeType": "YulIdentifier",
                              "src": "1329:12:23"
                            },
                            "nativeSrc": "1329:32:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1329:32:23"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nativeSrc": "1319:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1319:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1370:42:23",
                          "nodeType": "YulAssignment",
                          "src": "1370:42:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1397:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1397:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1408:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "1408:2:23",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1393:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1393:3:23"
                                },
                                "nativeSrc": "1393:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1393:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1380:12:23",
                              "nodeType": "YulIdentifier",
                              "src": "1380:12:23"
                            },
                            "nativeSrc": "1380:32:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1380:32:23"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nativeSrc": "1370:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1370:6:23"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1421:43:23",
                          "nodeType": "YulAssignment",
                          "src": "1421:43:23",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1448:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1448:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1459:3:23",
                                    "nodeType": "YulLiteral",
                                    "src": "1459:3:23",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1444:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1444:3:23"
                                },
                                "nativeSrc": "1444:19:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1444:19:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1431:12:23",
                              "nodeType": "YulIdentifier",
                              "src": "1431:12:23"
                            },
                            "nativeSrc": "1431:33:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1431:33:23"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nativeSrc": "1421:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1421:6:23"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256",
                    "nativeSrc": "1004:466:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1076:9:23",
                        "nodeType": "YulTypedName",
                        "src": "1076:9:23",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1087:7:23",
                        "nodeType": "YulTypedName",
                        "src": "1087:7:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1099:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1099:6:23",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1107:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1107:6:23",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "1115:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1115:6:23",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "1123:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1123:6:23",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nativeSrc": "1131:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1131:6:23",
                        "type": ""
                      }
                    ],
                    "src": "1004:466:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "1570:92:23",
                      "nodeType": "YulBlock",
                      "src": "1570:92:23",
                      "statements": [
                        {
                          "nativeSrc": "1580:26:23",
                          "nodeType": "YulAssignment",
                          "src": "1580:26:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1592:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "1592:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1603:2:23",
                                "nodeType": "YulLiteral",
                                "src": "1603:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1588:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "1588:3:23"
                            },
                            "nativeSrc": "1588:18:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1588:18:23"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1580:4:23",
                              "nodeType": "YulIdentifier",
                              "src": "1580:4:23"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1622:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "1622:9:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "1647:6:23",
                                        "nodeType": "YulIdentifier",
                                        "src": "1647:6:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "1640:6:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "1640:6:23"
                                    },
                                    "nativeSrc": "1640:14:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1640:14:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "1633:6:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1633:6:23"
                                },
                                "nativeSrc": "1633:22:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1633:22:23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1615:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1615:6:23"
                            },
                            "nativeSrc": "1615:41:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1615:41:23"
                          },
                          "nativeSrc": "1615:41:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "1615:41:23"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "1475:187:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1539:9:23",
                        "nodeType": "YulTypedName",
                        "src": "1539:9:23",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1550:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1550:6:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1561:4:23",
                        "nodeType": "YulTypedName",
                        "src": "1561:4:23",
                        "type": ""
                      }
                    ],
                    "src": "1475:187:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "1790:184:23",
                      "nodeType": "YulBlock",
                      "src": "1790:184:23",
                      "statements": [
                        {
                          "nativeSrc": "1800:26:23",
                          "nodeType": "YulAssignment",
                          "src": "1800:26:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1812:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "1812:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1823:2:23",
                                "nodeType": "YulLiteral",
                                "src": "1823:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1808:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "1808:3:23"
                            },
                            "nativeSrc": "1808:18:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1808:18:23"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1800:4:23",
                              "nodeType": "YulIdentifier",
                              "src": "1800:4:23"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1842:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "1842:9:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "1857:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1857:6:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1865:42:23",
                                    "nodeType": "YulLiteral",
                                    "src": "1865:42:23",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "1853:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1853:3:23"
                                },
                                "nativeSrc": "1853:55:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1853:55:23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1835:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1835:6:23"
                            },
                            "nativeSrc": "1835:74:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1835:74:23"
                          },
                          "nativeSrc": "1835:74:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "1835:74:23"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1929:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "1929:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1940:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "1940:2:23",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1925:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1925:3:23"
                                },
                                "nativeSrc": "1925:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1925:18:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "1959:6:23",
                                        "nodeType": "YulIdentifier",
                                        "src": "1959:6:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "1952:6:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "1952:6:23"
                                    },
                                    "nativeSrc": "1952:14:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1952:14:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "1945:6:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "1945:6:23"
                                },
                                "nativeSrc": "1945:22:23",
                                "nodeType": "YulFunctionCall",
                                "src": "1945:22:23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1918:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "1918:6:23"
                            },
                            "nativeSrc": "1918:50:23",
                            "nodeType": "YulFunctionCall",
                            "src": "1918:50:23"
                          },
                          "nativeSrc": "1918:50:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "1918:50:23"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed",
                    "nativeSrc": "1667:307:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1751:9:23",
                        "nodeType": "YulTypedName",
                        "src": "1751:9:23",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1762:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1762:6:23",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1770:6:23",
                        "nodeType": "YulTypedName",
                        "src": "1770:6:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1781:4:23",
                        "nodeType": "YulTypedName",
                        "src": "1781:4:23",
                        "type": ""
                      }
                    ],
                    "src": "1667:307:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "2031:270:23",
                      "nodeType": "YulBlock",
                      "src": "2031:270:23",
                      "statements": [
                        {
                          "nativeSrc": "2041:20:23",
                          "nodeType": "YulAssignment",
                          "src": "2041:20:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "2056:1:23",
                                "nodeType": "YulIdentifier",
                                "src": "2056:1:23"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "2059:1:23",
                                "nodeType": "YulIdentifier",
                                "src": "2059:1:23"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "2052:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "2052:3:23"
                            },
                            "nativeSrc": "2052:9:23",
                            "nodeType": "YulFunctionCall",
                            "src": "2052:9:23"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nativeSrc": "2041:7:23",
                              "nodeType": "YulIdentifier",
                              "src": "2041:7:23"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "2127:168:23",
                            "nodeType": "YulBlock",
                            "src": "2127:168:23",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2148:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "2148:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2151:77:23",
                                      "nodeType": "YulLiteral",
                                      "src": "2151:77:23",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2141:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "2141:6:23"
                                  },
                                  "nativeSrc": "2141:88:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2141:88:23"
                                },
                                "nativeSrc": "2141:88:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "2141:88:23"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2249:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "2249:1:23",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2252:4:23",
                                      "nodeType": "YulLiteral",
                                      "src": "2252:4:23",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2242:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "2242:6:23"
                                  },
                                  "nativeSrc": "2242:15:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2242:15:23"
                                },
                                "nativeSrc": "2242:15:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "2242:15:23"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2277:1:23",
                                      "nodeType": "YulLiteral",
                                      "src": "2277:1:23",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2280:4:23",
                                      "nodeType": "YulLiteral",
                                      "src": "2280:4:23",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2270:6:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "2270:6:23"
                                  },
                                  "nativeSrc": "2270:15:23",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2270:15:23"
                                },
                                "nativeSrc": "2270:15:23",
                                "nodeType": "YulExpressionStatement",
                                "src": "2270:15:23"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nativeSrc": "2090:1:23",
                                        "nodeType": "YulIdentifier",
                                        "src": "2090:1:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "2083:6:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "2083:6:23"
                                    },
                                    "nativeSrc": "2083:9:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2083:9:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nativeSrc": "2097:1:23",
                                        "nodeType": "YulIdentifier",
                                        "src": "2097:1:23"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nativeSrc": "2104:7:23",
                                            "nodeType": "YulIdentifier",
                                            "src": "2104:7:23"
                                          },
                                          {
                                            "name": "x",
                                            "nativeSrc": "2113:1:23",
                                            "nodeType": "YulIdentifier",
                                            "src": "2113:1:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nativeSrc": "2100:3:23",
                                          "nodeType": "YulIdentifier",
                                          "src": "2100:3:23"
                                        },
                                        "nativeSrc": "2100:15:23",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2100:15:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nativeSrc": "2094:2:23",
                                      "nodeType": "YulIdentifier",
                                      "src": "2094:2:23"
                                    },
                                    "nativeSrc": "2094:22:23",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2094:22:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "2080:2:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "2080:2:23"
                                },
                                "nativeSrc": "2080:37:23",
                                "nodeType": "YulFunctionCall",
                                "src": "2080:37:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2073:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "2073:6:23"
                            },
                            "nativeSrc": "2073:45:23",
                            "nodeType": "YulFunctionCall",
                            "src": "2073:45:23"
                          },
                          "nativeSrc": "2070:225:23",
                          "nodeType": "YulIf",
                          "src": "2070:225:23"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nativeSrc": "1979:322:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "2010:1:23",
                        "nodeType": "YulTypedName",
                        "src": "2010:1:23",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "2013:1:23",
                        "nodeType": "YulTypedName",
                        "src": "2013:1:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nativeSrc": "2019:7:23",
                        "nodeType": "YulTypedName",
                        "src": "2019:7:23",
                        "type": ""
                      }
                    ],
                    "src": "1979:322:23"
                  },
                  {
                    "body": {
                      "nativeSrc": "2480:164:23",
                      "nodeType": "YulBlock",
                      "src": "2480:164:23",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2497:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "2497:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2508:2:23",
                                "nodeType": "YulLiteral",
                                "src": "2508:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2490:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "2490:6:23"
                            },
                            "nativeSrc": "2490:21:23",
                            "nodeType": "YulFunctionCall",
                            "src": "2490:21:23"
                          },
                          "nativeSrc": "2490:21:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "2490:21:23"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2531:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "2531:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2542:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "2542:2:23",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2527:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "2527:3:23"
                                },
                                "nativeSrc": "2527:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "2527:18:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2547:2:23",
                                "nodeType": "YulLiteral",
                                "src": "2547:2:23",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2520:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "2520:6:23"
                            },
                            "nativeSrc": "2520:30:23",
                            "nodeType": "YulFunctionCall",
                            "src": "2520:30:23"
                          },
                          "nativeSrc": "2520:30:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "2520:30:23"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2570:9:23",
                                    "nodeType": "YulIdentifier",
                                    "src": "2570:9:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2581:2:23",
                                    "nodeType": "YulLiteral",
                                    "src": "2581:2:23",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2566:3:23",
                                  "nodeType": "YulIdentifier",
                                  "src": "2566:3:23"
                                },
                                "nativeSrc": "2566:18:23",
                                "nodeType": "YulFunctionCall",
                                "src": "2566:18:23"
                              },
                              {
                                "hexValue": "496e76616c696420747970654964",
                                "kind": "string",
                                "nativeSrc": "2586:16:23",
                                "nodeType": "YulLiteral",
                                "src": "2586:16:23",
                                "type": "",
                                "value": "Invalid typeId"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2559:6:23",
                              "nodeType": "YulIdentifier",
                              "src": "2559:6:23"
                            },
                            "nativeSrc": "2559:44:23",
                            "nodeType": "YulFunctionCall",
                            "src": "2559:44:23"
                          },
                          "nativeSrc": "2559:44:23",
                          "nodeType": "YulExpressionStatement",
                          "src": "2559:44:23"
                        },
                        {
                          "nativeSrc": "2612:26:23",
                          "nodeType": "YulAssignment",
                          "src": "2612:26:23",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2624:9:23",
                                "nodeType": "YulIdentifier",
                                "src": "2624:9:23"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2635:2:23",
                                "nodeType": "YulLiteral",
                                "src": "2635:2:23",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2620:3:23",
                              "nodeType": "YulIdentifier",
                              "src": "2620:3:23"
                            },
                            "nativeSrc": "2620:18:23",
                            "nodeType": "YulFunctionCall",
                            "src": "2620:18:23"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2612:4:23",
                              "nodeType": "YulIdentifier",
                              "src": "2612:4:23"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_bfdc576261a4768c0a8004a0ac0e8e3c6e8c45cab828024d35f45a8401d7e0a1__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "2306:338:23",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2457:9:23",
                        "nodeType": "YulTypedName",
                        "src": "2457:9:23",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2471:4:23",
                        "nodeType": "YulTypedName",
                        "src": "2471:4:23",
                        "type": ""
                      }
                    ],
                    "src": "2306:338:23"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x))))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_bfdc576261a4768c0a8004a0ac0e8e3c6e8c45cab828024d35f45a8401d7e0a1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid typeId\")\n        tail := add(headStart, 96)\n    }\n}",
              "id": 23,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100f55760003560e01c8063937b1e1a11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b8063937b1e1a146101965780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063748ddfc0116100d3578063748ddfc01461012957806378c8cda71461013c57806379ba50971461014f5780638da5cb5b1461015757600080fd5b80631c3004f9146100fa5780636702106a14610116578063715018a61461011f575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b61010360045481565b61012761024f565b005b61012761013736600461073b565b610263565b61012761014a36600461077d565b6102a7565b610127610331565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101036101a436600461079f565b6103ad565b6101cc6101b736600461077d565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b6101276101ea36600461073b565b61048f565b6101276101fd36600461073b565b6104cc565b60015473ffffffffffffffffffffffffffffffffffffffff16610171565b61012761022e36600461077d565b610509565b61012761024136600461077d565b6105b9565b61010360025481565b610257610647565b610261600061069a565b565b61026b610647565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b6102af610647565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103a1576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b6103aa8161069a565b50565b600060045484116103c057506000610486565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156103f657506000610486565b816000036104075750600254610486565b81600103610424578360035461041d91906107ec565b9050610486565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207479706549640000000000000000000000000000000000006044820152606401610398565b95945050505050565b610497610647565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b69060200161029c565b6104d4610647565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f9060200161029c565b610511610647565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c1610647565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610261576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610398565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103aa816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561074d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b919050565b60006020828403121561078f57600080fd5b61079882610754565b9392505050565b600080600080600060a086880312156107b757600080fd5b6107c086610754565b94506107ce60208701610754565b94979496505050506040830135926060810135926080909101359150565b808202811582820484141761082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212207c7f6a76bc86e756ddd648a3807f189f0cd8f16fe541f32a35126d01f1c11e1264736f6c63430008170033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x937B1E1A GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE30C3978 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xF80F5DD5 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xF8245BCA EQ PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x937B1E1A EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x9B19251A EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xBE0A8433 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xE1BA2426 EQ PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x748DDFC0 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x748DDFC0 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x78C8CDA7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1C3004F9 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6702106A EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x11F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x103 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x24F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x127 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x331 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10D JUMP JUMPDEST PUSH2 0x103 PUSH2 0x1A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x79F JUMP JUMPDEST PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10D JUMP JUMPDEST PUSH2 0x127 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x48F JUMP JUMPDEST PUSH2 0x127 PUSH2 0x1FD CALLDATASIZE PUSH1 0x4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x171 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x509 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x241 CALLDATASIZE PUSH1 0x4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x257 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x261 PUSH1 0x0 PUSH2 0x69A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26B PUSH2 0x647 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xE4E9D0C42D8FF6BD519BE0E8FD05D3D4748E8652FE9DE147829FCF629ECB036E SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x2AF PUSH2 0x647 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF93F9A76C1BF3444D22400A00CB9FE990E6ABE9DBB333FDA48859CFEE864543D SWAP2 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x1 SLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 EQ PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AA DUP2 PUSH2 0x69A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD DUP5 GT PUSH2 0x3C0 JUMPI POP PUSH1 0x0 PUSH2 0x486 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3F6 JUMPI POP PUSH1 0x0 PUSH2 0x486 JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x407 JUMPI POP PUSH1 0x2 SLOAD PUSH2 0x486 JUMP JUMPDEST DUP2 PUSH1 0x1 SUB PUSH2 0x424 JUMPI DUP4 PUSH1 0x3 SLOAD PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x7EC JUMP JUMPDEST SWAP1 POP PUSH2 0x486 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420747970654964000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x398 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x497 PUSH2 0x647 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x663296B7F6BFFFFD2FE8B1A20BA38B843659FACF6B429FA95B92DD589ED552B6 SWAP1 PUSH1 0x20 ADD PUSH2 0x29C JUMP JUMPDEST PUSH2 0x4D4 PUSH2 0x647 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x65E483827EE434BD81785823D46BDF2D3CE181AA289DE8108EEEEE22B207F50F SWAP1 PUSH1 0x20 ADD PUSH2 0x29C JUMP JUMPDEST PUSH2 0x511 PUSH2 0x647 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x574 PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x5C1 PUSH2 0x647 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0xF93F9A76C1BF3444D22400A00CB9FE990E6ABE9DBB333FDA48859CFEE864543D SWAP2 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x261 JUMPI PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x398 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE PUSH2 0x3AA DUP2 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x74D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP3 PUSH2 0x754 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C0 DUP7 PUSH2 0x754 JUMP JUMPDEST SWAP5 POP PUSH2 0x7CE PUSH1 0x20 DUP8 ADD PUSH2 0x754 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x82A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x7F6A76BC86E756DDD648A3807F189F0CD8F16FE541F32A35126D01F1C1 0x1E SLT PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
          "sourceMap": "330:2080:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;427:25;;;;;;;;;160::23;;;148:2;133:18;427:25:20;;;;;;;;458:31;;;;;;2293:101:6;;;:::i;:::-;;1777:149:20;;;;;;:::i;:::-;;:::i;2266:142::-;;;;;;:::i;:::-;;:::i;1761:229:7:-;;;:::i;1638:85:6:-;1684:7;1710:6;;;1638:85;;;949:42:23;937:55;;;919:74;;907:2;892:18;1638:85:6;773:226:23;1044:572:20;;;;;;:::i;:::-;;:::i;495:42::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1640:14:23;;1633:22;1615:41;;1603:2;1588:18;495:42:20;1475:187:23;1932:185:20;;;;;;:::i;:::-;;:::i;1622:149::-;;;;;;:::i;:::-;;:::i;874:99:7:-;953:13;;;;874:99;;1166:178;;;;;;:::i;:::-;;:::i;2123:137:20:-;;;;;;:::i;:::-;;:::i;396:25::-;;;;;;2293:101:6;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1777:149:20:-;1531:13:6;:11;:13::i;:::-;1850:10:20::1;:24:::0;;;1889:30:::1;::::0;160:25:23;;;1889:30:20::1;::::0;148:2:23;133:18;1889:30:20::1;;;;;;;;1777:149:::0;:::o;2266:142::-;1531:13:6;:11;:13::i;:::-;2334:15:20::1;::::0;::::1;2352:5;2334:15:::0;;;:9:::1;:15;::::0;;;;;;;:23;;;::::1;::::0;;2372:29;;1835:74:23;;;1925:18;;;1918:50;;;;2372:29:20::1;::::0;1808:18:23;2372:29:20::1;1667:307:23::0;1761:229:7;953:13;;735:10:15;;1856:24:7;953:13;1856:24;;1852:96;;1903:34;;;;;949:42:23;937:55;;1903:34:7;;;919:74:23;892:18;;1903:34:7;;;;;;;;1852:96;1957:26;1976:6;1957:18;:26::i;:::-;1803:187;1761:229::o;1044:572:20:-;1247:12;1292:16;;1279:9;:29;1275:68;;-1:-1:-1;1331:1:20;1324:8;;1275:68;1357:17;;;;;;;:9;:17;;;;;;;;1353:56;;;-1:-1:-1;1397:1:20;1390:8;;1353:56;1423:6;1433:1;1423:11;1419:191;;-1:-1:-1;1457:10:20;;1419:191;;;1488:6;1498:1;1488:11;1484:126;;1535:9;1522:10;;:22;;;;:::i;:::-;1515:29;;1484:126;;;1575:24;;;;;2508:2:23;1575:24:20;;;2490:21:23;2547:2;2527:18;;;2520:30;2586:16;2566:18;;;2559:44;2620:18;;1575:24:20;2306:338:23;1484:126:20;1044:572;;;;;;;:::o;1932:185::-;1531:13:6;:11;:13::i;:::-;2017:16:20::1;:36:::0;;;2068:42:::1;::::0;160:25:23;;;2068:42:20::1;::::0;148:2:23;133:18;2068:42:20::1;14:177:23::0;1622:149:20;1531:13:6;:11;:13::i;:::-;1695:10:20::1;:24:::0;;;1734:30:::1;::::0;160:25:23;;;1734:30:20::1;::::0;148:2:23;133:18;1734:30:20::1;14:177:23::0;1166:178:7;1531:13:6;:11;:13::i;:::-;1255::7::1;:24:::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;1319:7:::1;1684::6::0;1710:6;;;;1638:85;1319:7:7::1;1294:43;;;;;;;;;;;;1166:178:::0;:::o;2123:137:20:-;1531:13:6;:11;:13::i;:::-;2188:15:20::1;::::0;::::1;;::::0;;;:9:::1;:15;::::0;;;;;;;;:22;;;::::1;2206:4;2188:22:::0;;::::1;::::0;;;2225:28;;1835:74:23;;;1925:18;;;1918:50;2225:28:20::1;::::0;1808:18:23;2225:28:20::1;1667:307:23::0;1796:162:6;1684:7;1710:6;1855:23;1710:6;735:10:15;1855:23:6;1851:101;;1901:40;;;;;735:10:15;1901:40:6;;;919:74:23;892:18;;1901:40:6;773:226:23;1528:153:7;1617:13;1610:20;;;;;;1640:34;1665:8;2985:16:6;3004:6;;;3020:17;;;;;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;196:180:23:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:23;;196:180;-1:-1:-1;196:180:23:o;381:196::-;449:20;;509:42;498:54;;488:65;;478:93;;567:1;564;557:12;478:93;381:196;;;:::o;582:186::-;641:6;694:2;682:9;673:7;669:23;665:32;662:52;;;710:1;707;700:12;662:52;733:29;752:9;733:29;:::i;:::-;723:39;582:186;-1:-1:-1;;;582:186:23:o;1004:466::-;1099:6;1107;1115;1123;1131;1184:3;1172:9;1163:7;1159:23;1155:33;1152:53;;;1201:1;1198;1191:12;1152:53;1224:29;1243:9;1224:29;:::i;:::-;1214:39;;1272:38;1306:2;1295:9;1291:18;1272:38;:::i;:::-;1004:466;;1262:48;;-1:-1:-1;;;;1357:2:23;1342:18;;1329:32;;1408:2;1393:18;;1380:32;;1459:3;1444:19;;;1431:33;;-1:-1:-1;1004:466:23:o;1979:322::-;2052:9;;;2083;;2100:15;;;2094:22;;2080:37;2070:225;;2151:77;2148:1;2141:88;2252:4;2249:1;2242:15;2280:4;2277:1;2270:15;2070:225;1979:322;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "430000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "acceptOwnership()": "infinite",
            "addWhitelist(address)": "28164",
            "calculateCost(address,address,uint256,uint256,uint256)": "infinite",
            "maxFreeUserCount()": "2330",
            "oneTimeFee()": "2372",
            "owner()": "2385",
            "pendingOwner()": "2329",
            "perUserFee()": "2308",
            "removeWhitelist(address)": "28134",
            "renounceOwnership()": "infinite",
            "setMaxFreeUserCount(uint256)": "25620",
            "setOneTimeFee(uint256)": "25642",
            "setPerUserFee(uint256)": "25565",
            "transferOwnership(address)": "30384",
            "whitelist(address)": "2564"
          }
        },
        "methodIdentifiers": {
          "acceptOwnership()": "79ba5097",
          "addWhitelist(address)": "f80f5dd5",
          "calculateCost(address,address,uint256,uint256,uint256)": "937b1e1a",
          "maxFreeUserCount()": "6702106a",
          "oneTimeFee()": "f8245bca",
          "owner()": "8da5cb5b",
          "pendingOwner()": "e30c3978",
          "perUserFee()": "1c3004f9",
          "removeWhitelist(address)": "78c8cda7",
          "renounceOwnership()": "715018a6",
          "setMaxFreeUserCount(uint256)": "be0a8433",
          "setOneTimeFee(uint256)": "e1ba2426",
          "setPerUserFee(uint256)": "748ddfc0",
          "transferOwnership(address)": "f2fde38b",
          "whitelist(address)": "9b19251a"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oneTimeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perUserFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUserCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxFreeUserCount\",\"type\":\"uint256\"}],\"name\":\"MaxFreeUserCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oneTimeFee\",\"type\":\"uint256\"}],\"name\":\"OneTimeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perUserFee\",\"type\":\"uint256\"}],\"name\":\"PerUserFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"calculateCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFreeUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTimeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFreeUserCount\",\"type\":\"uint256\"}],\"name\":\"setMaxFreeUserCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oneTimeFee\",\"type\":\"uint256\"}],\"name\":\"setOneTimeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perUserFee\",\"type\":\"uint256\"}],\"name\":\"setPerUserFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WhitelistCostPolicy.sol\":\"WhitelistCostPolicy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"src/WhitelistCostPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { ICostPolicyV2 } from \\\"./interfaces/ICostPolicyV2.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {ICostPolicy} from \\\"./interfaces/ICostPolicy.sol\\\";\\n\\ncontract WhitelistCostPolicy is ICostPolicyV2, Ownable2Step {\\n    uint256 public oneTimeFee;\\n    uint256 public perUserFee;\\n    uint256 public maxFreeUserCount;\\n    mapping (address => bool) public whitelist;\\n\\n    event OneTimeFeeUpdated(uint256 _oneTimeFee);\\n    event PerUserFeeUpdated(uint256 _perUserFee);\\n    event MaxFreeUserCountUpdated(uint256 _maxFreeUserCount);\\n    event WhitelistUpdated(address user, bool status);\\n\\n    constructor(\\n        address initialOwner,\\n        uint256 _oneTimeFee,\\n        uint256 _perUserFee,\\n        uint256 _minUserCount\\n    ) Ownable(initialOwner) {\\n        oneTimeFee = _oneTimeFee;\\n        perUserFee = _perUserFee;\\n        maxFreeUserCount = _minUserCount;\\n    }\\n\\n    function calculateCost(\\n        address token,\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost)\\n    {\\n        if (userCount <= maxFreeUserCount) {\\n            return 0;\\n        }\\n\\n        if (whitelist[sender]) {\\n            return 0;\\n        }\\n\\n        if (typeId == 0) {\\n            cost = oneTimeFee;\\n        } else if (typeId == 1) {\\n            cost = perUserFee * userCount;\\n        } else {\\n            revert(\\\"Invalid typeId\\\");\\n        }\\n    }\\n\\n    function setOneTimeFee(uint256 _oneTimeFee) external onlyOwner {\\n        oneTimeFee = _oneTimeFee;\\n        emit OneTimeFeeUpdated(_oneTimeFee);\\n    }\\n\\n    function setPerUserFee(uint256 _perUserFee) external onlyOwner {\\n        perUserFee = _perUserFee;\\n        emit PerUserFeeUpdated(_perUserFee);\\n    }\\n\\n    function setMaxFreeUserCount(uint256 _maxFreeUserCount) external onlyOwner {\\n        maxFreeUserCount = _maxFreeUserCount;\\n        emit MaxFreeUserCountUpdated(_maxFreeUserCount);\\n    }\\n\\n    function addWhitelist(address user) external onlyOwner {\\n        whitelist[user] = true;\\n        emit WhitelistUpdated(user, true);\\n    }\\n\\n    function removeWhitelist(address user) external onlyOwner {\\n        whitelist[user] = false;\\n        emit WhitelistUpdated(user, false);\\n    }\\n}\\n\",\"keccak256\":\"0xce3738358a0125626213dd4de814abc5d625484dd899ecd4f89607c64ff915a3\",\"license\":\"MIT\"},\"src/interfaces/ICostPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ICostPolicy {\\n    function calculateCost(\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0x8fcfa9d2b02d860593b3bd75ae216d14038f07a9d9ad04e839e49a2f486ffed5\",\"license\":\"MIT\"},\"src/interfaces/ICostPolicyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ICostPolicyV2 {\\n    function calculateCost(\\n        address token,\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0xfa85b84ae69e085cfe1740b1259af6ffb2a4413e5c8cdbe8f7af24c1e01b9bdd\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 968,
            "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1116,
            "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
            "label": "_pendingOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2893,
            "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
            "label": "oneTimeFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2895,
            "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
            "label": "perUserFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2897,
            "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
            "label": "maxFreeUserCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2901,
            "contract": "src/WhitelistCostPolicy.sol:WhitelistCostPolicy",
            "label": "whitelist",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"src/ERC20BatchSenderV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { UpgradeableBase } from \\\"./UpgradeableBase.sol\\\";\\nimport { ICostPolicyV2 } from \\\"./interfaces/ICostPolicyV2.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ERC20BatchSenderV2 is UpgradeableBase {\\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    ICostPolicyV2 public costPolicy;\\n    address public feeRecipient;\\n\\n    using SafeERC20 for IERC20;\\n\\n    error InsufficientCost();\\n    error LengthMismatch();\\n\\n    event BatchSend(address indexed token, address[] accounts, uint256[] amounts, uint256 typeId);\\n    event ERC20TokenWithdrawn(IERC20 _token, address _recipient, uint256 _value);\\n    event CostPolicyUpdated(ICostPolicyV2 _costPolicy);\\n    event FeeRecipientUpdated(address _feeRecipient);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address manager,\\n        ICostPolicyV2 _costPolicy,\\n        address _feeRecipient\\n    ) public initializer {\\n        __UpgradeableBase_init(_msgSender());\\n        _grantManagerRole(manager);\\n        costPolicy = _costPolicy;\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    function reinitialize(\\n        ICostPolicyV2 _costPolicy,\\n        address _feeRecipient\\n    ) public reinitializer(3) {\\n        costPolicy = _costPolicy;\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /// @notice send\\n    /// @dev    suppose token is approved.\\n    function send(\\n        IERC20 _token,\\n        address[] calldata _accounts,\\n        uint256[] calldata _amounts,\\n        uint256 _totalAmount,\\n        uint256 _typeId\\n    )\\n        external\\n        payable\\n    {\\n        if (_accounts.length != _amounts.length) {\\n            revert LengthMismatch();\\n        }\\n\\n        uint256 cost = costPolicy.calculateCost(address(_token), _msgSender(), _accounts.length, _amounts.length, _typeId);\\n        if (msg.value < cost) {\\n            revert InsufficientCost();\\n        }\\n        _sendFee(cost);\\n\\n        _token.safeTransferFrom(_msgSender(), address(this), _totalAmount);\\n        _send(_token, _accounts, _amounts, _typeId);\\n    }\\n\\n    function sendETH(\\n        address[] calldata _accounts,\\n        uint256[] calldata _amounts,\\n        uint256 _totalAmount,\\n        uint256 _typeId\\n    )\\n        public\\n        payable\\n    {\\n        if (_accounts.length != _amounts.length) {\\n            revert LengthMismatch();\\n        }\\n\\n        uint256 cost = costPolicy.calculateCost(ETH_ADDRESS, _msgSender(), _accounts.length, _amounts.length, _typeId);\\n        if (msg.value < _totalAmount + cost) {\\n            revert InsufficientCost();\\n        }\\n        _sendFee(cost);\\n\\n        _sendETH(_accounts, _amounts, _typeId);\\n    }\\n\\n    function _send(IERC20 _token, address[] calldata _accounts, uint256[] calldata _amounts, uint256 _typeId) private {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n            _token.safeTransfer(account, amount);\\n        }\\n\\n        emit BatchSend(address(_token), _accounts, _amounts, _typeId);\\n    }\\n\\n    function _sendETH(address[] calldata _accounts, uint256[] calldata _amounts, uint256 _typeId) public payable {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n            (bool success,) = account.call{ value: amount }(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n\\n        emit BatchSend(ETH_ADDRESS, _accounts, _amounts, _typeId);\\n    }\\n\\n    function _sendFee(uint256 amount) internal {\\n        (bool success,) = feeRecipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * Allows the owner of the contract to withdraw ETH that may reside on the contract address.\\n     */\\n    function withdrawETH(address _recipient) public onlyManager returns (bool success) {\\n        (bool sent,) = payable(_recipient).call{ value: address(this).balance }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * Allows the owner of the contract to withdraw any ERC20 that may reside on the contract address.\\n     */\\n    function withdrawERC20(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _value\\n    )\\n        public\\n        onlyManager\\n        returns (bool success)\\n    {\\n        IERC20 token = IERC20(_token);\\n        token.safeTransfer(_recipient, _value);\\n\\n        emit ERC20TokenWithdrawn(_token, _recipient, _value);\\n        return true;\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) public onlyManager {\\n        feeRecipient = _feeRecipient;\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    function setCostPolicy(ICostPolicyV2 _costPolicy) public onlyManager {\\n        costPolicy = _costPolicy;\\n        emit CostPolicyUpdated(_costPolicy);\\n    }\\n}\\n\"\n    },\n    \"src/interfaces/ICostPolicy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ICostPolicy {\\n    function calculateCost(\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost);\\n}\\n\"\n    },\n    \"src/interfaces/ICostPolicyV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ICostPolicyV2 {\\n    function calculateCost(\\n        address token,\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost);\\n}\\n\"\n    },\n    \"src/UpgradeableBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nabstract contract UpgradeableBase is AccessControlUpgradeable, UUPSUpgradeable {\\n    error NotManager();\\n\\n    // keccak256(\\\"MANAGER_ROLE\\\")\\n    bytes32 public constant MANAGER_ROLE = 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08;\\n\\n    function __UpgradeableBase_init(address admin) internal onlyInitializing {\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\\n\\n    function _grantManagerRole(address _manager) internal {\\n        _grantRole(MANAGER_ROLE, _manager);\\n    }\\n\\n    modifier onlyManager() {\\n        if (!hasRole(MANAGER_ROLE, _msgSender())) {\\n            revert NotManager();\\n        }\\n        _;\\n    }\\n}\\n\"\n    },\n    \"src/WhitelistCostPolicy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { ICostPolicyV2 } from \\\"./interfaces/ICostPolicyV2.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {ICostPolicy} from \\\"./interfaces/ICostPolicy.sol\\\";\\n\\ncontract WhitelistCostPolicy is ICostPolicyV2, Ownable2Step {\\n    uint256 public oneTimeFee;\\n    uint256 public perUserFee;\\n    uint256 public maxFreeUserCount;\\n    mapping (address => bool) public whitelist;\\n\\n    event OneTimeFeeUpdated(uint256 _oneTimeFee);\\n    event PerUserFeeUpdated(uint256 _perUserFee);\\n    event MaxFreeUserCountUpdated(uint256 _maxFreeUserCount);\\n    event WhitelistUpdated(address user, bool status);\\n\\n    constructor(\\n        address initialOwner,\\n        uint256 _oneTimeFee,\\n        uint256 _perUserFee,\\n        uint256 _minUserCount\\n    ) Ownable(initialOwner) {\\n        oneTimeFee = _oneTimeFee;\\n        perUserFee = _perUserFee;\\n        maxFreeUserCount = _minUserCount;\\n    }\\n\\n    function calculateCost(\\n        address token,\\n        address sender,\\n        uint256 userCount,\\n        uint256 totalAmount,\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (uint256 cost)\\n    {\\n        if (userCount <= maxFreeUserCount) {\\n            return 0;\\n        }\\n\\n        if (whitelist[sender]) {\\n            return 0;\\n        }\\n\\n        if (typeId == 0) {\\n            cost = oneTimeFee;\\n        } else if (typeId == 1) {\\n            cost = perUserFee * userCount;\\n        } else {\\n            revert(\\\"Invalid typeId\\\");\\n        }\\n    }\\n\\n    function setOneTimeFee(uint256 _oneTimeFee) external onlyOwner {\\n        oneTimeFee = _oneTimeFee;\\n        emit OneTimeFeeUpdated(_oneTimeFee);\\n    }\\n\\n    function setPerUserFee(uint256 _perUserFee) external onlyOwner {\\n        perUserFee = _perUserFee;\\n        emit PerUserFeeUpdated(_perUserFee);\\n    }\\n\\n    function setMaxFreeUserCount(uint256 _maxFreeUserCount) external onlyOwner {\\n        maxFreeUserCount = _maxFreeUserCount;\\n        emit MaxFreeUserCountUpdated(_maxFreeUserCount);\\n    }\\n\\n    function addWhitelist(address user) external onlyOwner {\\n        whitelist[user] = true;\\n        emit WhitelistUpdated(user, true);\\n    }\\n\\n    function removeWhitelist(address user) external onlyOwner {\\n        whitelist[user] = false;\\n        emit WhitelistUpdated(user, false);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 10000000\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "d2367b43333a14eb08e02d5e74e9feb4",
      "transactionHash": "0x5d0987fa267804b481094f354cd4bb7717a8f05d061d733ff5299e7e8e018296",
      "args": [
        "0x45129A8fe7Dee4e6E16E738be673984DA684371F",
        "30000000000000000000",
        "30000000000000000000",
        10
      ]
    },
    "decoded": {
      "from": "0x45129A8fe7Dee4e6E16E738be673984DA684371F",
      "gasPrice": "80000000000",
      "gasLimit": "613665",
      "to": null,
      "value": "0",
      "nonce": 3,
      "data": "0x608060405234801561001057600080fd5b506040516109a63803806109a683398101604081905261002f916100e6565b836001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007a565b5060029290925560035560045550610131565b600180546001600160a01b031916905561009381610096565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100fc57600080fd5b84516001600160a01b038116811461011357600080fd5b60208601516040870151606090970151919890975090945092505050565b610866806101406000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063937b1e1a11610097578063e30c397811610066578063e30c397814610202578063f2fde38b14610220578063f80f5dd514610233578063f8245bca1461024657600080fd5b8063937b1e1a146101965780639b19251a146101a9578063be0a8433146101dc578063e1ba2426146101ef57600080fd5b8063748ddfc0116100d3578063748ddfc01461012957806378c8cda71461013c57806379ba50971461014f5780638da5cb5b1461015757600080fd5b80631c3004f9146100fa5780636702106a14610116578063715018a61461011f575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b61010360045481565b61012761024f565b005b61012761013736600461073b565b610263565b61012761014a36600461077d565b6102a7565b610127610331565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b6101036101a436600461079f565b6103ad565b6101cc6101b736600461077d565b60056020526000908152604090205460ff1681565b604051901515815260200161010d565b6101276101ea36600461073b565b61048f565b6101276101fd36600461073b565b6104cc565b60015473ffffffffffffffffffffffffffffffffffffffff16610171565b61012761022e36600461077d565b610509565b61012761024136600461077d565b6105b9565b61010360025481565b610257610647565b610261600061069a565b565b61026b610647565b60038190556040518181527fe4e9d0c42d8ff6bd519be0e8fd05d3d4748e8652fe9de147829fcf629ecb036e906020015b60405180910390a150565b6102af610647565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051938452908301919091527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103a1576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b6103aa8161069a565b50565b600060045484116103c057506000610486565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090205460ff16156103f657506000610486565b816000036104075750600254610486565b81600103610424578360035461041d91906107ec565b9050610486565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207479706549640000000000000000000000000000000000006044820152606401610398565b95945050505050565b610497610647565b60048190556040518181527f663296b7f6bffffd2fe8b1a20ba38b843659facf6b429fa95b92dd589ed552b69060200161029c565b6104d4610647565b60028190556040518181527f65e483827ee434bd81785823d46bdf2d3ce181aa289de8108eeeee22b207f50f9060200161029c565b610511610647565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561057460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6105c1610647565b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d910161029c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610261576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610398565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103aa816000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561074d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b919050565b60006020828403121561078f57600080fd5b61079882610754565b9392505050565b600080600080600060a086880312156107b757600080fd5b6107c086610754565b94506107ce60208701610754565b94979496505050506040830135926060810135926080909101359150565b808202811582820484141761082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212207c7f6a76bc86e756ddd648a3807f189f0cd8f16fe541f32a35126d01f1c11e1264736f6c6343000817003300000000000000000000000045129a8fe7dee4e6e16e738be673984da684371f000000000000000000000000000000000000000000000001a055690d9db80000000000000000000000000000000000000000000000000001a055690d9db80000000000000000000000000000000000000000000000000000000000000000000a",
      "r": "0x8db337279af5651746b1101b2505b4027e4e4ca15107b7972b08b4b24e69c0dd",
      "s": "0x12bd0d96d08b41470f0118d1e6bb9f9f3e17d5e7f53f21767b4654823037ff8b",
      "v": 309,
      "chainId": 137
    }
  }
}